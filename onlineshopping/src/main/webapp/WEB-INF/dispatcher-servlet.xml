<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:wf="http://www.springframework.org/schema/webflow-config"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
   	http://www.springframework.org/schema/beans/spring-beans.xsd
   	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd 
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd 
    http://www.springframework.org/schema/webflow-config
    http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd 
    http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd       
   	">
	
	<!-- Enable AspectJ style of Spring AOP for annotation based AOP support -->
	<aop:aspectj-autoproxy />
	
		
	<context:component-scan base-package="net.hka.onlineshopping" />
	
	<!-- Scan the back-end shopping components, so the AOP config can initialize the beans that need to be watched for advice  -->
	<context:component-scan base-package="net.hka.shoppingbackend" />
	

	<!-- View resolver for both Spring MVC and Spring Webflow -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">

		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />

	</bean>

	<!-- id must be multipartResolver - to be used to upload files from your 
		JSP pages -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />

	<!-- Loading static resources -->
	<mvc:annotation-driven /> <!-- Just to say this application is annotation driven -->

	<mvc:resources location="/assets/" mapping="/resources/**" />




							<!-- ***[Webflow configuration]*** -->

	<!-- Entry point for the flow -->
	<wf:flow-executor id="flowExecutor" flow-registry="flowRegistry" />

	<!-- The flow-registry for finding the flows of the application -->
	<wf:flow-registry id="flowRegistry" base-path="/WEB-INF/views/flows"
		flow-builder-services="flowBuilderServices">
		<wf:flow-location-pattern value="/**/*-flow.xml" />
	</wf:flow-registry>

	<!-- Adding the flow-builder-services to resolving the views -->
	<wf:flow-builder-services id="flowBuilderServices"
		view-factory-creator="viewFactoryCreator" 
		validator="validator"
	/>
	<!-- Adding the validator class bean to be able to do spring validation for the forms/screens working under the flows -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

	<!-- FlowHandlerMapping helps DispatcherServlet to know to send flow requests 
		to the FlowHandlerAdapter -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="flowRegistry" ref="flowRegistry" />
		
		<!-- Making the flow priority much preferable than the MVC, 
			 so if I have same URL such as /register in our case, then the flow URL will took place  
		-->
		<property name="order" value="-1" /> 
	</bean>

	<!-- Spring Web Flow provides a Spring MVC handler adapter: the bridge between 
		DispatcherServlet and the flow executor -->
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
		<property name="flowExecutor" ref="flowExecutor" />
	</bean>

	<!-- For resolving views for web flow  -->
	<bean id="viewFactoryCreator"
		class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
		<property name="viewResolvers" ref="viewResolver" />
	</bean>

</beans>